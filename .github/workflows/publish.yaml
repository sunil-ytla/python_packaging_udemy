name: Build, Test, and Publish

on:
  pull_request:
    types: [opened, synchronize] # when a PR is opened or updated
  push:
    branches:
      - main # when code is pushed to the main branch, this will be done mostly by merging PRs
  workflow_dispatch: # allows manual triggering of the workflow from the GitHub UI


jobs:

  check-version-txt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all history for all branches and tags
      - name: Tag with release version
        run: |
          git tag $(cat version.txt)

  lint-format-and-static-code-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: 3.13
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Lint, Format and other code quality checks
        run: |
          /bin/bash -x run.sh lint:ci

  execute-tests:
    needs: build-wheel-and-sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: 3.13
      - name: download wheel and sdist artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/
      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov ./dist/*.whl
      - name: Lint, Format and other code quality checks
        run: |
          /bin/bash -x run.sh test:ci

  build-wheel-and-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: 3.13
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Build CLI
        run: |
          pip install build
      - name: Build package
        run: |
          /bin/bash -x run.sh build
      - name: Upload wheel and sdist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/*
          retention-days: 1


  publish:
    needs:
      - execute-tests
      - build-wheel-and-sdist
      - lint-format-and-static-code-checks
      - check-version-txt
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: 3.13
      - name: download wheel and sdist artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-twine
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install twine
        run: |
          pip install twine
      - name: Publish package to test PyPI
        run: |
          /bin/bash -x run.sh publish:test
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      - name: Publish package to PyPI
        run: |
          /bin/bash -x run.sh publish:prod
        env:
          PROD_PYPI_TOKEN: ${{ secrets.PROD_PYPI_TOKEN }}
      - name: Tag Release Version
        run: |
          git push origin --tags # you need workflow read and write permissions for this to work set this in the repo settings

  dump-context-to-log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump Secrets context
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: echo "$SECRETS_CONTEXT"
      - name: Dump vars context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: echo "$VARS_CONTEXT"
